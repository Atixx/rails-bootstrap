working_directory "<%= current_path %>"
pid "<%= fetch(:unicorn_pid) %>"
stderr_path "<%= fetch(:unicorn_error_log) %>"
stdout_path "<%= fetch(:unicorn_log) %>"

listen "/tmp/unicorn.<%= fetch(:nginx_config_name) %>.sock"
worker_processes <%= fetch(:unicorn_workers) %>
timeout 60

preload_app true

before_exec do |server|
  ENV["BUNDLE_GEMFILE"] = "<%= current_path %>/Gemfile"
end

before_fork do |server, worker|

  # Signal.trap 'USR2' do
  #   puts 'Since a black hole is lurking and eating USR2s we will hit http_server#reexec ourselves'
  #   server.send(:reexec)
  # end

  # Disconnect since the database connection will not carry over
  if defined? ActiveRecord::Base
    ActiveRecord::Base.connection.disconnect!
  end

  # Quit the old unicorn process
  old_pid = "#{server.config[:pid]}.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end

  if defined?(Resque)
    Resque.redis.quit
    puts "Disconnected from Redis"
  end

  sleep 1
end

after_fork do |server, worker|
  # Start up the database connection again in the worker
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end

  ENV['REDISTOGO_URL'] ||= 'redis://localhost:6379'

  uri = URI.parse(ENV['REDISTOGO_URL'])

  REDIS_WORKER = Redis.new(
    host: uri.host,
    port: uri.port,
    password: uri.password,
    thread_safe: true
  )

  if defined?(Resque)
    Resque.redis = REDIS_WORKER
    Resque.redis.client.reconnect
    puts "Connected to Redis"
  end
end
